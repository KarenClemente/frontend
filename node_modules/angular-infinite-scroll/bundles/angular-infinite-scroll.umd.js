(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/common'), require('rxjs'), require('rxjs/operators'), require('@angular/core')) :
    typeof define === 'function' && define.amd ? define('angular-infinite-scroll', ['exports', '@angular/common', 'rxjs', 'rxjs/operators', '@angular/core'], factory) :
    (factory((global['angular-infinite-scroll'] = {}),global.ng.common,global.rxjs,global.rxjs.operators,global.ng.core));
}(this, (function (exports,common,rxjs,operators,core) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (b.hasOwnProperty(p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var DEFAULTS = {
        STEP: 4,
        POSITION: 0,
        OFFSET: 100,
        DELAY: 0
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /**
     * @abstract
     * @template T
     */
    var /**
     * @abstract
     * @template T
     */ InfiniteScroll = (function () {
        function InfiniteScroll(_differs, zone) {
            var _this = this;
            this._differs = _differs;
            this.zone = zone;
            this._userEnd$ = new rxjs.Observable();
            this._end$ = new rxjs.Subject();
            this._updateAfterRender$ = new rxjs.Subject();
            this.position = DEFAULTS.POSITION;
            this.step = DEFAULTS.STEP;
            this.offset = DEFAULTS.OFFSET;
            this.delay = DEFAULTS.DELAY;
            this.loading$ = new rxjs.BehaviorSubject(false);
            zone.runOutsideAngular(function () {
                window.addEventListener('scroll', function () { return _this._update(); });
                window.addEventListener('resize', function () { return _this._update(); });
            });
        }
        /**
         * @return {?}
         */
        InfiniteScroll.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this._subscriptionLoadingEnd = rxjs.merge(this._userEnd$, this._updateAfterRender$).subscribe(function () { return _this.loading$.next(false); });
                this._subscriptionUpdateAfterRender =
                    this._updateAfterRender$.pipe(operators.switchMap(function () { return rxjs.interval(_this.delay).pipe(operators.take(1)); })).subscribe(function () { return _this._update(); });
                this._update();
            };
        /**
         * @return {?}
         */
        InfiniteScroll.prototype.ngDoCheck = /**
         * @return {?}
         */
            function () {
                if (this._ngFor) {
                    this._ngFor.ngDoCheck();
                }
            };
        /**
         * @return {?}
         */
        InfiniteScroll.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this.destroy(this._subscriptionEnd);
                this.destroy(this._subscriptionLoading);
                this.destroy(this._subscriptionLoadingEnd);
                this.destroy(this._subscriptionUpdateAfterRender);
            };
        /**
         * @param {?} viewContainer
         * @param {?} template
         * @return {?}
         */
        InfiniteScroll.prototype.createNgFor = /**
         * @param {?} viewContainer
         * @param {?} template
         * @return {?}
         */
            function (viewContainer, template) {
                this._ngFor = new common.NgForOf(viewContainer, template, this._differs);
            };
        /**
         * @param {?} loading
         * @return {?}
         */
        InfiniteScroll.prototype.subscribeLoading = /**
         * @param {?} loading
         * @return {?}
         */
            function (loading) {
                this.destroy(this._subscriptionLoading);
                this._subscriptionLoading = this.loading$.subscribe(loading);
            };
        /**
         * @param {?} scrollEnd
         * @return {?}
         */
        InfiniteScroll.prototype.subscribeEnd = /**
         * @param {?} scrollEnd
         * @return {?}
         */
            function (scrollEnd) {
                var _this = this;
                this.destroy(this._subscriptionEnd);
                this._userEnd$ = this._end$.pipe(operators.exhaustMap(function () { return scrollEnd(_this.position, _this.step); }));
                this._subscriptionEnd = this._userEnd$.subscribe(this.newItems.bind(this), function () { return _this.newItems.bind(_this)([]); });
            };
        /**
         * @return {?}
         */
        InfiniteScroll.prototype._update = /**
         * @return {?}
         */
            function () {
                var _this = this;
                /** @type {?} */
                var scrollHeight = window.innerHeight + window.scrollY;
                if (scrollHeight >= document.body.offsetHeight - this.offset) {
                    this.zone.runOutsideAngular(function () {
                        _this.update();
                    });
                }
            };
        /**
         * @param {?} subscription
         * @return {?}
         */
        InfiniteScroll.prototype.destroy = /**
         * @param {?} subscription
         * @return {?}
         */
            function (subscription) {
                if (subscription && !subscription.closed) {
                    subscription.unsubscribe();
                }
            };
        return InfiniteScroll;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /**
     * @template T
     */
    var InfiniteStaticMarker = (function () {
        function InfiniteStaticMarker(template) {
            this.template = template;
            this.enabled = false;
        }
        InfiniteStaticMarker.decorators = [
            { type: core.Directive, args: [{ selector: '[infiniteStatic]' },] },
        ];
        /** @nocollapse */
        InfiniteStaticMarker.ctorParameters = function () {
            return [
                { type: core.TemplateRef }
            ];
        };
        return InfiniteStaticMarker;
    }());
    /**
     * @template T
     */
    var InfiniteTemplateMarker = (function () {
        function InfiniteTemplateMarker(template) {
            this.template = template;
        }
        InfiniteTemplateMarker.decorators = [
            { type: core.Directive, args: [{ selector: '[infiniteTemplate]' },] },
        ];
        /** @nocollapse */
        InfiniteTemplateMarker.ctorParameters = function () {
            return [
                { type: core.TemplateRef }
            ];
        };
        return InfiniteTemplateMarker;
    }());
    /**
     * @template T
     */
    var InfiniteScrollComponent = (function (_super) {
        __extends(InfiniteScrollComponent, _super);
        function InfiniteScrollComponent(differs, zone) {
            var _this = _super.call(this, differs, zone) || this;
            _this._dummies = 0;
            _this._outOfItems = false;
            return _this;
        }
        Object.defineProperty(InfiniteScrollComponent.prototype, "loading", {
            set: /**
             * @param {?} loading
             * @return {?}
             */ function (loading) {
                this.subscribeLoading(loading);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InfiniteScrollComponent.prototype, "end", {
            set: /**
             * @param {?} scrollEnd
             * @return {?}
             */ function (scrollEnd) {
                this.subscribeEnd(scrollEnd);
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        InfiniteScrollComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this._itemsStatic = this.staticMarkers.toArray();
                this.updateItems();
                this.update();
            };
        /**
         * @return {?}
         */
        InfiniteScrollComponent.prototype.update = /**
         * @return {?}
         */
            function () {
                if (!this._items) {
                    this._items = [];
                    this._dummies = 0;
                }
                if (this._items && (!this._items.length || this._items.every(function (item) { return item === undefined; }))) {
                    this._items = [];
                    this._dummies = 0;
                    this.addDummies();
                }
                /** @type {?} */
                var staticLength = 0;
                if (this._itemsStatic) {
                    staticLength = this._itemsStatic.length;
                }
                if (this.position < staticLength) {
                    this.loading$.next(true);
                    this._updateAfterRender$.next();
                    this.updateItems();
                    this.position += this.step;
                }
                else if (staticLength + this.position < this._items.length - this._dummies) {
                    this.loading$.next(true);
                    this._updateAfterRender$.next();
                    this.position += this.step;
                }
                else if (this._subscriptionEnd) {
                    this.loading$.next(true);
                    this._end$.next();
                    this.addDummies();
                    this.position += this.step;
                }
            };
        /**
         * @param {?} newItems
         * @return {?}
         */
        InfiniteScrollComponent.prototype.newItems = /**
         * @param {?} newItems
         * @return {?}
         */
            function (newItems) {
                var _this = this;
                while (this._dummies > 0) {
                    if (this._items.length) {
                        this._items.pop();
                    }
                    this._dummies--;
                }
                /** @type {?} */
                var newItemsArray = Array.from(newItems);
                this.zone.run(function () {
                    _this._items = _this._items.concat(newItemsArray);
                });
                // only continue when newItems arrive
                if (newItemsArray.length) {
                    this._updateAfterRender$.next();
                }
                else {
                    this._outOfItems = true;
                }
            };
        /**
         * @return {?}
         */
        InfiniteScrollComponent.prototype.updateItems = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.zone.run(function () {
                    for (var index in _this._itemsStatic) {
                        _this._itemsStatic[index].enabled = _this.position > index;
                    }
                });
            };
        /**
         * @return {?}
         */
        InfiniteScrollComponent.prototype.addDummies = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.zone.run(function () {
                    if (!_this._dummies && !_this._outOfItems) {
                        _this._items = _this._items.concat(Array(_this.step).fill(undefined));
                        _this._dummies += _this.step;
                    }
                });
            };
        InfiniteScrollComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'infinite-scroll',
                        template: "\n    <ng-template ngFor let-item [ngForOf]=\"_itemsStatic\">\n      <ng-template [ngIf]=\"item.enabled\">\n        <ng-container *ngTemplateOutlet=\"item.template\"></ng-container>\n      </ng-template>\n    </ng-template>\n    <ng-template ngFor let-item [ngForOf]=\"_items\">\n      <ng-container *ngTemplateOutlet=\"templateMarker.template; context: {$implicit: item}\"></ng-container>\n    </ng-template>"
                    },] },
        ];
        /** @nocollapse */
        InfiniteScrollComponent.ctorParameters = function () {
            return [
                { type: core.IterableDiffers },
                { type: core.NgZone }
            ];
        };
        InfiniteScrollComponent.propDecorators = {
            staticMarkers: [{ type: core.ContentChildren, args: [InfiniteStaticMarker,] }],
            templateMarker: [{ type: core.ContentChild, args: [InfiniteTemplateMarker,] }],
            dynamicTemplate: [{ type: core.ViewChild, args: ['dynamic',] }],
            position: [{ type: core.Input }],
            step: [{ type: core.Input }],
            offset: [{ type: core.Input }],
            delay: [{ type: core.Input }],
            loading: [{ type: core.Input }],
            end: [{ type: core.Input }]
        };
        return InfiniteScrollComponent;
    }(InfiniteScroll));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /**
     * @template T
     */
    var InfiniteScrollDirective = (function (_super) {
        __extends(InfiniteScrollDirective, _super);
        function InfiniteScrollDirective(viewContainer, templateRef, differs, zone) {
            var _this = _super.call(this, differs, zone) || this;
            _this._positionInitial = DEFAULTS.POSITION;
            _this._dummies = 0;
            _this._outOfItems = false;
            _this.step = DEFAULTS.STEP;
            _this.offset = DEFAULTS.OFFSET;
            _this.delay = DEFAULTS.DELAY;
            _this.createNgFor(viewContainer, templateRef);
            return _this;
        }
        Object.defineProperty(InfiniteScrollDirective.prototype, "infiniteScrollOf", {
            set: /**
             * @param {?} infiniteScrollOf
             * @return {?}
             */ function (infiniteScrollOf) {
                if (infiniteScrollOf) {
                    this._items = Array.from(infiniteScrollOf);
                }
                this.position = this._positionInitial;
                this._dummies = 0;
                this.updateItems();
                this.update();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InfiniteScrollDirective.prototype, "infiniteScrollTrackBy", {
            get: /**
             * @return {?}
             */ function () {
                return this._ngFor.ngForTrackBy;
            },
            set: /**
             * @param {?} fn
             * @return {?}
             */ function (fn) {
                this._ngFor.ngForTrackBy = fn;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InfiniteScrollDirective.prototype, "infiniteScrollTemplate", {
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._ngFor.ngForTemplate = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InfiniteScrollDirective.prototype, "infiniteScrollPosition", {
            set: /**
             * @param {?} position
             * @return {?}
             */ function (position) {
                if (position === undefined || position === null) {
                    this.position = DEFAULTS.POSITION;
                }
                else {
                    this.position = position;
                }
                this._positionInitial = position;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InfiniteScrollDirective.prototype, "infiniteScrollLoading", {
            set: /**
             * @param {?} loading
             * @return {?}
             */ function (loading) {
                this.subscribeLoading(loading);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InfiniteScrollDirective.prototype, "infiniteScrollEnd", {
            set: /**
             * @param {?} scrollEnd
             * @return {?}
             */ function (scrollEnd) {
                this.subscribeEnd(scrollEnd);
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        InfiniteScrollDirective.prototype.update = /**
         * @return {?}
         */
            function () {
                if (!this._items) {
                    this._items = [];
                }
                if (this._items && (!this._items.length || this._items.every(function (item) { return item === undefined; }))) {
                    this._items = [];
                    this.addDummies();
                    this.updateItems();
                }
                if (this.position < this._items.length - this._dummies) {
                    this.loading$.next(true);
                    this.updateItems();
                    this._updateAfterRender$.next();
                    this.position += this.step;
                }
                else if (this._subscriptionEnd) {
                    this.loading$.next(true);
                    this._end$.next();
                    this.position += this.step;
                    this.addDummies();
                    this.updateItems();
                }
            };
        /**
         * @param {?} newItems
         * @return {?}
         */
        InfiniteScrollDirective.prototype.newItems = /**
         * @param {?} newItems
         * @return {?}
         */
            function (newItems) {
                while (this._dummies > 0) {
                    if (this._items.length) {
                        this._items.pop();
                    }
                    this._dummies--;
                }
                /** @type {?} */
                var newItemsArray = Array.from(newItems);
                this._items = this._items.concat(newItemsArray);
                this.updateItems();
                // only continue when newItems arrive
                if (newItemsArray.length) {
                    this._updateAfterRender$.next();
                }
                else {
                    this._outOfItems = true;
                }
            };
        /**
         * @return {?}
         */
        InfiniteScrollDirective.prototype.updateItems = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.zone.run(function () {
                    if (_this._items) {
                        // update ngForOf<T> directive
                        // update ngForOf<T> directive
                        _this._ngFor.ngForOf = _this._items.slice(0, _this.position);
                    }
                });
            };
        /**
         * @return {?}
         */
        InfiniteScrollDirective.prototype.addDummies = /**
         * @return {?}
         */
            function () {
                if (!this._dummies && !this._outOfItems) {
                    this._items = this._items.concat(Array(this.step).fill(undefined));
                    this._dummies += this.step;
                }
            };
        InfiniteScrollDirective.decorators = [
            { type: core.Directive, args: [{ selector: '[infiniteScroll]' },] },
        ];
        /** @nocollapse */
        InfiniteScrollDirective.ctorParameters = function () {
            return [
                { type: core.ViewContainerRef },
                { type: core.TemplateRef },
                { type: core.IterableDiffers },
                { type: core.NgZone }
            ];
        };
        InfiniteScrollDirective.propDecorators = {
            infiniteScrollOf: [{ type: core.Input }],
            infiniteScrollTrackBy: [{ type: core.Input }],
            infiniteScrollTemplate: [{ type: core.Input }],
            infiniteScrollPosition: [{ type: core.Input }],
            step: [{ type: core.Input, args: ['infiniteScrollStep',] }],
            offset: [{ type: core.Input, args: ['infiniteScrollOffset',] }],
            delay: [{ type: core.Input, args: ['infiniteScrollDelay',] }],
            infiniteScrollLoading: [{ type: core.Input }],
            infiniteScrollEnd: [{ type: core.Input }]
        };
        return InfiniteScrollDirective;
    }(InfiniteScroll));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var InfiniteScrollModule = (function () {
        function InfiniteScrollModule() {
        }
        InfiniteScrollModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [InfiniteScrollDirective, InfiniteScrollComponent, InfiniteStaticMarker, InfiniteTemplateMarker],
                        imports: [common.CommonModule],
                        exports: [InfiniteScrollDirective, InfiniteScrollComponent, InfiniteStaticMarker, InfiniteTemplateMarker]
                    },] },
        ];
        return InfiniteScrollModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    exports.InfiniteScrollModule = InfiniteScrollModule;
    exports.ɵb = InfiniteScroll;
    exports.ɵe = InfiniteScrollComponent;
    exports.ɵc = InfiniteStaticMarker;
    exports.ɵd = InfiniteTemplateMarker;
    exports.ɵa = InfiniteScrollDirective;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,