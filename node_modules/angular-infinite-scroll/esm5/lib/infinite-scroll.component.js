/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, Input, IterableDiffers, NgZone, ViewChild, ViewContainerRef } from '@angular/core';
import { ContentChild, ContentChildren, Directive, QueryList, TemplateRef } from '@angular/core';
import { InfiniteScroll } from './infinite-scroll';
/**
 * @template T
 */
var InfiniteStaticMarker = /** @class */ (function () {
    function InfiniteStaticMarker(template) {
        this.template = template;
        this.enabled = false;
    }
    InfiniteStaticMarker.decorators = [
        { type: Directive, args: [{ selector: '[infiniteStatic]' },] },
    ];
    /** @nocollapse */
    InfiniteStaticMarker.ctorParameters = function () { return [
        { type: TemplateRef }
    ]; };
    return InfiniteStaticMarker;
}());
export { InfiniteStaticMarker };
if (false) {
    /** @type {?} */
    InfiniteStaticMarker.prototype.enabled;
    /** @type {?} */
    InfiniteStaticMarker.prototype.template;
}
/**
 * @template T
 */
var InfiniteTemplateMarker = /** @class */ (function () {
    function InfiniteTemplateMarker(template) {
        this.template = template;
    }
    InfiniteTemplateMarker.decorators = [
        { type: Directive, args: [{ selector: '[infiniteTemplate]' },] },
    ];
    /** @nocollapse */
    InfiniteTemplateMarker.ctorParameters = function () { return [
        { type: TemplateRef }
    ]; };
    return InfiniteTemplateMarker;
}());
export { InfiniteTemplateMarker };
if (false) {
    /** @type {?} */
    InfiniteTemplateMarker.prototype.template;
}
/**
 * @template T
 */
var InfiniteScrollComponent = /** @class */ (function (_super) {
    tslib_1.__extends(InfiniteScrollComponent, _super);
    function InfiniteScrollComponent(differs, zone) {
        var _this = _super.call(this, differs, zone) || this;
        _this._dummies = 0;
        _this._outOfItems = false;
        return _this;
    }
    Object.defineProperty(InfiniteScrollComponent.prototype, "loading", {
        set: /**
         * @param {?} loading
         * @return {?}
         */
        function (loading) {
            this.subscribeLoading(loading);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InfiniteScrollComponent.prototype, "end", {
        set: /**
         * @param {?} scrollEnd
         * @return {?}
         */
        function (scrollEnd) {
            this.subscribeEnd(scrollEnd);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    InfiniteScrollComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        this._itemsStatic = this.staticMarkers.toArray();
        this.updateItems();
        this.update();
    };
    /**
     * @return {?}
     */
    InfiniteScrollComponent.prototype.update = /**
     * @return {?}
     */
    function () {
        if (!this._items) {
            this._items = [];
            this._dummies = 0;
        }
        if (this._items && (!this._items.length || this._items.every(function (item) { return item === undefined; }))) {
            this._items = [];
            this._dummies = 0;
            this.addDummies();
        }
        /** @type {?} */
        var staticLength = 0;
        if (this._itemsStatic) {
            staticLength = this._itemsStatic.length;
        }
        if (this.position < staticLength) {
            this.loading$.next(true);
            this._updateAfterRender$.next();
            this.updateItems();
            this.position += this.step;
        }
        else if (staticLength + this.position < this._items.length - this._dummies) {
            this.loading$.next(true);
            this._updateAfterRender$.next();
            this.position += this.step;
        }
        else if (this._subscriptionEnd) {
            this.loading$.next(true);
            this._end$.next();
            this.addDummies();
            this.position += this.step;
        }
    };
    /**
     * @param {?} newItems
     * @return {?}
     */
    InfiniteScrollComponent.prototype.newItems = /**
     * @param {?} newItems
     * @return {?}
     */
    function (newItems) {
        var _this = this;
        while (this._dummies > 0) {
            if (this._items.length) {
                this._items.pop();
            }
            this._dummies--;
        }
        /** @type {?} */
        var newItemsArray = Array.from(newItems);
        this.zone.run(function () {
            _this._items = _this._items.concat(newItemsArray);
        });
        // only continue when newItems arrive
        if (newItemsArray.length) {
            this._updateAfterRender$.next();
        }
        else {
            this._outOfItems = true;
        }
    };
    /**
     * @return {?}
     */
    InfiniteScrollComponent.prototype.updateItems = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.zone.run(function () {
            for (var index in _this._itemsStatic) {
                _this._itemsStatic[index].enabled = _this.position > index;
            }
        });
    };
    /**
     * @return {?}
     */
    InfiniteScrollComponent.prototype.addDummies = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.zone.run(function () {
            if (!_this._dummies && !_this._outOfItems) {
                _this._items = _this._items.concat(Array(_this.step).fill(undefined));
                _this._dummies += _this.step;
            }
        });
    };
    InfiniteScrollComponent.decorators = [
        { type: Component, args: [{
                    selector: 'infinite-scroll',
                    template: "\n    <ng-template ngFor let-item [ngForOf]=\"_itemsStatic\">\n      <ng-template [ngIf]=\"item.enabled\">\n        <ng-container *ngTemplateOutlet=\"item.template\"></ng-container>\n      </ng-template>\n    </ng-template>\n    <ng-template ngFor let-item [ngForOf]=\"_items\">\n      <ng-container *ngTemplateOutlet=\"templateMarker.template; context: {$implicit: item}\"></ng-container>\n    </ng-template>"
                },] },
    ];
    /** @nocollapse */
    InfiniteScrollComponent.ctorParameters = function () { return [
        { type: IterableDiffers },
        { type: NgZone }
    ]; };
    InfiniteScrollComponent.propDecorators = {
        staticMarkers: [{ type: ContentChildren, args: [InfiniteStaticMarker,] }],
        templateMarker: [{ type: ContentChild, args: [InfiniteTemplateMarker,] }],
        dynamicTemplate: [{ type: ViewChild, args: ['dynamic',] }],
        position: [{ type: Input }],
        step: [{ type: Input }],
        offset: [{ type: Input }],
        delay: [{ type: Input }],
        loading: [{ type: Input }],
        end: [{ type: Input }]
    };
    return InfiniteScrollComponent;
}(InfiniteScroll));
export { InfiniteScrollComponent };
if (false) {
    /** @type {?} */
    InfiniteScrollComponent.prototype.staticMarkers;
    /** @type {?} */
    InfiniteScrollComponent.prototype.templateMarker;
    /** @type {?} */
    InfiniteScrollComponent.prototype.dynamicTemplate;
    /** @type {?} */
    InfiniteScrollComponent.prototype._itemsStatic;
    /** @type {?} */
    InfiniteScrollComponent.prototype._items;
    /** @type {?} */
    InfiniteScrollComponent.prototype._dummies;
    /** @type {?} */
    InfiniteScrollComponent.prototype._outOfItems;
    /** @type {?} */
    InfiniteScrollComponent.prototype.position;
    /** @type {?} */
    InfiniteScrollComponent.prototype.step;
    /** @type {?} */
    InfiniteScrollComponent.prototype.offset;
    /** @type {?} */
    InfiniteScrollComponent.prototype.delay;
}

//# sourceMappingURL=data:application/json;base64,