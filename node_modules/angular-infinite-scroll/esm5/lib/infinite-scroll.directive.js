/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Directive, Input, IterableDiffers } from '@angular/core';
import { NgZone, TemplateRef, ViewContainerRef } from '@angular/core';
import { DEFAULTS } from './defaults';
import { InfiniteScroll } from './infinite-scroll';
/**
 * @template T
 */
var InfiniteScrollDirective = /** @class */ (function (_super) {
    tslib_1.__extends(InfiniteScrollDirective, _super);
    function InfiniteScrollDirective(viewContainer, templateRef, differs, zone) {
        var _this = _super.call(this, differs, zone) || this;
        _this._positionInitial = DEFAULTS.POSITION;
        _this._dummies = 0;
        _this._outOfItems = false;
        _this.step = DEFAULTS.STEP;
        _this.offset = DEFAULTS.OFFSET;
        _this.delay = DEFAULTS.DELAY;
        _this.createNgFor(viewContainer, templateRef);
        return _this;
    }
    Object.defineProperty(InfiniteScrollDirective.prototype, "infiniteScrollOf", {
        set: /**
         * @param {?} infiniteScrollOf
         * @return {?}
         */
        function (infiniteScrollOf) {
            if (infiniteScrollOf) {
                this._items = Array.from(infiniteScrollOf);
            }
            this.position = this._positionInitial;
            this._dummies = 0;
            this.updateItems();
            this.update();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InfiniteScrollDirective.prototype, "infiniteScrollTrackBy", {
        get: /**
         * @return {?}
         */
        function () {
            return this._ngFor.ngForTrackBy;
        },
        set: /**
         * @param {?} fn
         * @return {?}
         */
        function (fn) {
            this._ngFor.ngForTrackBy = fn;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InfiniteScrollDirective.prototype, "infiniteScrollTemplate", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._ngFor.ngForTemplate = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InfiniteScrollDirective.prototype, "infiniteScrollPosition", {
        set: /**
         * @param {?} position
         * @return {?}
         */
        function (position) {
            if (position === undefined || position === null) {
                this.position = DEFAULTS.POSITION;
            }
            else {
                this.position = position;
            }
            this._positionInitial = position;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InfiniteScrollDirective.prototype, "infiniteScrollLoading", {
        set: /**
         * @param {?} loading
         * @return {?}
         */
        function (loading) {
            this.subscribeLoading(loading);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InfiniteScrollDirective.prototype, "infiniteScrollEnd", {
        set: /**
         * @param {?} scrollEnd
         * @return {?}
         */
        function (scrollEnd) {
            this.subscribeEnd(scrollEnd);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    InfiniteScrollDirective.prototype.update = /**
     * @return {?}
     */
    function () {
        if (!this._items) {
            this._items = [];
        }
        if (this._items && (!this._items.length || this._items.every(function (item) { return item === undefined; }))) {
            this._items = [];
            this.addDummies();
            this.updateItems();
        }
        if (this.position < this._items.length - this._dummies) {
            this.loading$.next(true);
            this.updateItems();
            this._updateAfterRender$.next();
            this.position += this.step;
        }
        else if (this._subscriptionEnd) {
            this.loading$.next(true);
            this._end$.next();
            this.position += this.step;
            this.addDummies();
            this.updateItems();
        }
    };
    /**
     * @param {?} newItems
     * @return {?}
     */
    InfiniteScrollDirective.prototype.newItems = /**
     * @param {?} newItems
     * @return {?}
     */
    function (newItems) {
        while (this._dummies > 0) {
            if (this._items.length) {
                this._items.pop();
            }
            this._dummies--;
        }
        /** @type {?} */
        var newItemsArray = Array.from(newItems);
        this._items = this._items.concat(newItemsArray);
        this.updateItems();
        // only continue when newItems arrive
        if (newItemsArray.length) {
            this._updateAfterRender$.next();
        }
        else {
            this._outOfItems = true;
        }
    };
    /**
     * @return {?}
     */
    InfiniteScrollDirective.prototype.updateItems = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.zone.run(function () {
            if (_this._items) {
                // update ngForOf<T> directive
                // update ngForOf<T> directive
                _this._ngFor.ngForOf = _this._items.slice(0, _this.position);
            }
        });
    };
    /**
     * @return {?}
     */
    InfiniteScrollDirective.prototype.addDummies = /**
     * @return {?}
     */
    function () {
        if (!this._dummies && !this._outOfItems) {
            this._items = this._items.concat(Array(this.step).fill(undefined));
            this._dummies += this.step;
        }
    };
    InfiniteScrollDirective.decorators = [
        { type: Directive, args: [{ selector: '[infiniteScroll]' },] },
    ];
    /** @nocollapse */
    InfiniteScrollDirective.ctorParameters = function () { return [
        { type: ViewContainerRef },
        { type: TemplateRef },
        { type: IterableDiffers },
        { type: NgZone }
    ]; };
    InfiniteScrollDirective.propDecorators = {
        infiniteScrollOf: [{ type: Input }],
        infiniteScrollTrackBy: [{ type: Input }],
        infiniteScrollTemplate: [{ type: Input }],
        infiniteScrollPosition: [{ type: Input }],
        step: [{ type: Input, args: ['infiniteScrollStep',] }],
        offset: [{ type: Input, args: ['infiniteScrollOffset',] }],
        delay: [{ type: Input, args: ['infiniteScrollDelay',] }],
        infiniteScrollLoading: [{ type: Input }],
        infiniteScrollEnd: [{ type: Input }]
    };
    return InfiniteScrollDirective;
}(InfiniteScroll));
export { InfiniteScrollDirective };
if (false) {
    /** @type {?} */
    InfiniteScrollDirective.prototype._items;
    /** @type {?} */
    InfiniteScrollDirective.prototype._positionInitial;
    /** @type {?} */
    InfiniteScrollDirective.prototype._dummies;
    /** @type {?} */
    InfiniteScrollDirective.prototype._outOfItems;
    /** @type {?} */
    InfiniteScrollDirective.prototype.step;
    /** @type {?} */
    InfiniteScrollDirective.prototype.offset;
    /** @type {?} */
    InfiniteScrollDirective.prototype.delay;
}

//# sourceMappingURL=data:application/json;base64,