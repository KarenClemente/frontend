import { NgForOfContext } from '@angular/common';
import { DoCheck, IterableDiffers, NgIterable, NgZone, OnDestroy, OnInit, TemplateRef, ViewContainerRef } from '@angular/core';
import { BehaviorSubject, Observable, Subject, Subscription } from 'rxjs';
export declare abstract class InfiniteScroll<T> implements OnInit, DoCheck, OnDestroy {
    private _differs;
    zone: NgZone;
    private _subscriptionLoading;
    private _subscriptionLoadingEnd;
    private _userEnd$;
    protected _subscriptionEnd: Subscription;
    protected _subscriptionUpdateAfterRender: Subscription;
    protected _end$: Subject<NgIterable<T>>;
    protected _updateAfterRender$: Subject<any>;
    protected _ngFor: any;
    constructor(_differs: IterableDiffers, zone: NgZone);
    position: number;
    step: number;
    offset: number;
    delay: number;
    loading$: BehaviorSubject<boolean>;
    ngOnInit(): void;
    ngDoCheck(): void;
    ngOnDestroy(): void;
    protected createNgFor(viewContainer: ViewContainerRef, template: TemplateRef<NgForOfContext<T>>): void;
    protected subscribeLoading(loading: (loading: boolean) => void): void;
    protected subscribeEnd(scrollEnd: (position: number, interval: number) => Observable<NgIterable<T>>): void;
    private _update();
    private destroy(subscription);
    protected abstract update(): any;
    protected abstract newItems(newItems: NgIterable<T>): any;
}
