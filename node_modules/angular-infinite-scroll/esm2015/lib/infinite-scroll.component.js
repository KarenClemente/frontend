/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Component, Input, IterableDiffers, NgZone, ViewChild, ViewContainerRef } from '@angular/core';
import { ContentChild, ContentChildren, Directive, QueryList, TemplateRef } from '@angular/core';
import { InfiniteScroll } from './infinite-scroll';
/**
 * @template T
 */
export class InfiniteStaticMarker {
    /**
     * @param {?} template
     */
    constructor(template) {
        this.template = template;
        this.enabled = false;
    }
}
InfiniteStaticMarker.decorators = [
    { type: Directive, args: [{ selector: '[infiniteStatic]' },] },
];
/** @nocollapse */
InfiniteStaticMarker.ctorParameters = () => [
    { type: TemplateRef }
];
if (false) {
    /** @type {?} */
    InfiniteStaticMarker.prototype.enabled;
    /** @type {?} */
    InfiniteStaticMarker.prototype.template;
}
/**
 * @template T
 */
export class InfiniteTemplateMarker {
    /**
     * @param {?} template
     */
    constructor(template) {
        this.template = template;
    }
}
InfiniteTemplateMarker.decorators = [
    { type: Directive, args: [{ selector: '[infiniteTemplate]' },] },
];
/** @nocollapse */
InfiniteTemplateMarker.ctorParameters = () => [
    { type: TemplateRef }
];
if (false) {
    /** @type {?} */
    InfiniteTemplateMarker.prototype.template;
}
/**
 * @template T
 */
export class InfiniteScrollComponent extends InfiniteScroll {
    /**
     * @param {?} differs
     * @param {?} zone
     */
    constructor(differs, zone) {
        super(differs, zone);
        this._dummies = 0;
        this._outOfItems = false;
    }
    /**
     * @param {?} loading
     * @return {?}
     */
    set loading(loading) {
        this.subscribeLoading(loading);
    }
    /**
     * @param {?} scrollEnd
     * @return {?}
     */
    set end(scrollEnd) {
        this.subscribeEnd(scrollEnd);
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this._itemsStatic = this.staticMarkers.toArray();
        this.updateItems();
        this.update();
    }
    /**
     * @return {?}
     */
    update() {
        if (!this._items) {
            this._items = [];
            this._dummies = 0;
        }
        if (this._items && (!this._items.length || this._items.every((item) => item === undefined))) {
            this._items = [];
            this._dummies = 0;
            this.addDummies();
        }
        /** @type {?} */
        let staticLength = 0;
        if (this._itemsStatic) {
            staticLength = this._itemsStatic.length;
        }
        if (this.position < staticLength) {
            this.loading$.next(true);
            this._updateAfterRender$.next();
            this.updateItems();
            this.position += this.step;
        }
        else if (staticLength + this.position < this._items.length - this._dummies) {
            this.loading$.next(true);
            this._updateAfterRender$.next();
            this.position += this.step;
        }
        else if (this._subscriptionEnd) {
            this.loading$.next(true);
            this._end$.next();
            this.addDummies();
            this.position += this.step;
        }
    }
    /**
     * @param {?} newItems
     * @return {?}
     */
    newItems(newItems) {
        while (this._dummies > 0) {
            if (this._items.length) {
                this._items.pop();
            }
            this._dummies--;
        }
        /** @type {?} */
        const newItemsArray = Array.from(newItems);
        this.zone.run(() => {
            this._items = this._items.concat(newItemsArray);
        });
        // only continue when newItems arrive
        if (newItemsArray.length) {
            this._updateAfterRender$.next();
        }
        else {
            this._outOfItems = true;
        }
    }
    /**
     * @return {?}
     */
    updateItems() {
        this.zone.run(() => {
            for (const index in this._itemsStatic) {
                this._itemsStatic[index].enabled = this.position > index;
            }
        });
    }
    /**
     * @return {?}
     */
    addDummies() {
        this.zone.run(() => {
            if (!this._dummies && !this._outOfItems) {
                this._items = this._items.concat(Array(this.step).fill(undefined));
                this._dummies += this.step;
            }
        });
    }
}
InfiniteScrollComponent.decorators = [
    { type: Component, args: [{
                selector: 'infinite-scroll',
                template: `
    <ng-template ngFor let-item [ngForOf]="_itemsStatic">
      <ng-template [ngIf]="item.enabled">
        <ng-container *ngTemplateOutlet="item.template"></ng-container>
      </ng-template>
    </ng-template>
    <ng-template ngFor let-item [ngForOf]="_items">
      <ng-container *ngTemplateOutlet="templateMarker.template; context: {$implicit: item}"></ng-container>
    </ng-template>`
            },] },
];
/** @nocollapse */
InfiniteScrollComponent.ctorParameters = () => [
    { type: IterableDiffers },
    { type: NgZone }
];
InfiniteScrollComponent.propDecorators = {
    staticMarkers: [{ type: ContentChildren, args: [InfiniteStaticMarker,] }],
    templateMarker: [{ type: ContentChild, args: [InfiniteTemplateMarker,] }],
    dynamicTemplate: [{ type: ViewChild, args: ['dynamic',] }],
    position: [{ type: Input }],
    step: [{ type: Input }],
    offset: [{ type: Input }],
    delay: [{ type: Input }],
    loading: [{ type: Input }],
    end: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    InfiniteScrollComponent.prototype.staticMarkers;
    /** @type {?} */
    InfiniteScrollComponent.prototype.templateMarker;
    /** @type {?} */
    InfiniteScrollComponent.prototype.dynamicTemplate;
    /** @type {?} */
    InfiniteScrollComponent.prototype._itemsStatic;
    /** @type {?} */
    InfiniteScrollComponent.prototype._items;
    /** @type {?} */
    InfiniteScrollComponent.prototype._dummies;
    /** @type {?} */
    InfiniteScrollComponent.prototype._outOfItems;
    /** @type {?} */
    InfiniteScrollComponent.prototype.position;
    /** @type {?} */
    InfiniteScrollComponent.prototype.step;
    /** @type {?} */
    InfiniteScrollComponent.prototype.offset;
    /** @type {?} */
    InfiniteScrollComponent.prototype.delay;
}

//# sourceMappingURL=data:application/json;base64,