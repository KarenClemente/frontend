/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { NgForOf } from '@angular/common';
import { BehaviorSubject, interval, merge, Observable, Subject } from 'rxjs';
import { exhaustMap, switchMap, take } from 'rxjs/operators';
import { DEFAULTS } from './defaults';
/**
 * @abstract
 * @template T
 */
export class InfiniteScroll {
    /**
     * @param {?} _differs
     * @param {?} zone
     */
    constructor(_differs, zone) {
        this._differs = _differs;
        this.zone = zone;
        this._userEnd$ = new Observable();
        this._end$ = new Subject();
        this._updateAfterRender$ = new Subject();
        this.position = DEFAULTS.POSITION;
        this.step = DEFAULTS.STEP;
        this.offset = DEFAULTS.OFFSET;
        this.delay = DEFAULTS.DELAY;
        this.loading$ = new BehaviorSubject(false);
        zone.runOutsideAngular(() => {
            window.addEventListener('scroll', () => this._update());
            window.addEventListener('resize', () => this._update());
        });
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this._subscriptionLoadingEnd = merge(this._userEnd$, this._updateAfterRender$).subscribe(() => this.loading$.next(false));
        this._subscriptionUpdateAfterRender =
            this._updateAfterRender$.pipe(switchMap(() => interval(this.delay).pipe(take(1)))).subscribe(() => this._update());
        this._update();
    }
    /**
     * @return {?}
     */
    ngDoCheck() {
        if (this._ngFor) {
            this._ngFor.ngDoCheck();
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.destroy(this._subscriptionEnd);
        this.destroy(this._subscriptionLoading);
        this.destroy(this._subscriptionLoadingEnd);
        this.destroy(this._subscriptionUpdateAfterRender);
    }
    /**
     * @param {?} viewContainer
     * @param {?} template
     * @return {?}
     */
    createNgFor(viewContainer, template) {
        this._ngFor = new NgForOf(viewContainer, template, this._differs);
    }
    /**
     * @param {?} loading
     * @return {?}
     */
    subscribeLoading(loading) {
        this.destroy(this._subscriptionLoading);
        this._subscriptionLoading = this.loading$.subscribe(loading);
    }
    /**
     * @param {?} scrollEnd
     * @return {?}
     */
    subscribeEnd(scrollEnd) {
        this.destroy(this._subscriptionEnd);
        this._userEnd$ = this._end$.pipe(exhaustMap(() => scrollEnd(this.position, this.step)));
        this._subscriptionEnd = this._userEnd$.subscribe(this.newItems.bind(this), () => this.newItems.bind(this)([]));
    }
    /**
     * @return {?}
     */
    _update() {
        /** @type {?} */
        const scrollHeight = window.innerHeight + window.scrollY;
        if (scrollHeight >= document.body.offsetHeight - this.offset) {
            this.zone.runOutsideAngular(() => {
                this.update();
            });
        }
    }
    /**
     * @param {?} subscription
     * @return {?}
     */
    destroy(subscription) {
        if (subscription && !subscription.closed) {
            subscription.unsubscribe();
        }
    }
}
if (false) {
    /** @type {?} */
    InfiniteScroll.prototype._subscriptionLoading;
    /** @type {?} */
    InfiniteScroll.prototype._subscriptionLoadingEnd;
    /** @type {?} */
    InfiniteScroll.prototype._userEnd$;
    /** @type {?} */
    InfiniteScroll.prototype._subscriptionEnd;
    /** @type {?} */
    InfiniteScroll.prototype._subscriptionUpdateAfterRender;
    /** @type {?} */
    InfiniteScroll.prototype._end$;
    /** @type {?} */
    InfiniteScroll.prototype._updateAfterRender$;
    /** @type {?} */
    InfiniteScroll.prototype._ngFor;
    /** @type {?} */
    InfiniteScroll.prototype.position;
    /** @type {?} */
    InfiniteScroll.prototype.step;
    /** @type {?} */
    InfiniteScroll.prototype.offset;
    /** @type {?} */
    InfiniteScroll.prototype.delay;
    /** @type {?} */
    InfiniteScroll.prototype.loading$;
    /** @type {?} */
    InfiniteScroll.prototype._differs;
    /** @type {?} */
    InfiniteScroll.prototype.zone;
    /**
     * @abstract
     * @return {?}
     */
    InfiniteScroll.prototype.update = function () { };
    /**
     * @abstract
     * @param {?} newItems
     * @return {?}
     */
    InfiniteScroll.prototype.newItems = function (newItems) { };
}

//# sourceMappingURL=data:application/json;base64,