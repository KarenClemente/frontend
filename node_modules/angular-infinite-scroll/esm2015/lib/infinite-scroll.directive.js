/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Directive, Input, IterableDiffers } from '@angular/core';
import { NgZone, TemplateRef, ViewContainerRef } from '@angular/core';
import { DEFAULTS } from './defaults';
import { InfiniteScroll } from './infinite-scroll';
/**
 * @template T
 */
export class InfiniteScrollDirective extends InfiniteScroll {
    /**
     * @param {?} viewContainer
     * @param {?} templateRef
     * @param {?} differs
     * @param {?} zone
     */
    constructor(viewContainer, templateRef, differs, zone) {
        super(differs, zone);
        this._positionInitial = DEFAULTS.POSITION;
        this._dummies = 0;
        this._outOfItems = false;
        this.step = DEFAULTS.STEP;
        this.offset = DEFAULTS.OFFSET;
        this.delay = DEFAULTS.DELAY;
        this.createNgFor(viewContainer, templateRef);
    }
    /**
     * @param {?} infiniteScrollOf
     * @return {?}
     */
    set infiniteScrollOf(infiniteScrollOf) {
        if (infiniteScrollOf) {
            this._items = Array.from(infiniteScrollOf);
        }
        this.position = this._positionInitial;
        this._dummies = 0;
        this.updateItems();
        this.update();
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    set infiniteScrollTrackBy(fn) {
        this._ngFor.ngForTrackBy = fn;
    }
    /**
     * @return {?}
     */
    get infiniteScrollTrackBy() {
        return this._ngFor.ngForTrackBy;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set infiniteScrollTemplate(value) {
        this._ngFor.ngForTemplate = value;
    }
    /**
     * @param {?} position
     * @return {?}
     */
    set infiniteScrollPosition(position) {
        if (position === undefined || position === null) {
            this.position = DEFAULTS.POSITION;
        }
        else {
            this.position = position;
        }
        this._positionInitial = position;
    }
    /**
     * @param {?} loading
     * @return {?}
     */
    set infiniteScrollLoading(loading) {
        this.subscribeLoading(loading);
    }
    /**
     * @param {?} scrollEnd
     * @return {?}
     */
    set infiniteScrollEnd(scrollEnd) {
        this.subscribeEnd(scrollEnd);
    }
    /**
     * @return {?}
     */
    update() {
        if (!this._items) {
            this._items = [];
        }
        if (this._items && (!this._items.length || this._items.every((item) => item === undefined))) {
            this._items = [];
            this.addDummies();
            this.updateItems();
        }
        if (this.position < this._items.length - this._dummies) {
            this.loading$.next(true);
            this.updateItems();
            this._updateAfterRender$.next();
            this.position += this.step;
        }
        else if (this._subscriptionEnd) {
            this.loading$.next(true);
            this._end$.next();
            this.position += this.step;
            this.addDummies();
            this.updateItems();
        }
    }
    /**
     * @param {?} newItems
     * @return {?}
     */
    newItems(newItems) {
        while (this._dummies > 0) {
            if (this._items.length) {
                this._items.pop();
            }
            this._dummies--;
        }
        /** @type {?} */
        const newItemsArray = Array.from(newItems);
        this._items = this._items.concat(newItemsArray);
        this.updateItems();
        // only continue when newItems arrive
        if (newItemsArray.length) {
            this._updateAfterRender$.next();
        }
        else {
            this._outOfItems = true;
        }
    }
    /**
     * @return {?}
     */
    updateItems() {
        this.zone.run(() => {
            if (this._items) {
                // update ngForOf<T> directive
                this._ngFor.ngForOf = this._items.slice(0, this.position);
            }
        });
    }
    /**
     * @return {?}
     */
    addDummies() {
        if (!this._dummies && !this._outOfItems) {
            this._items = this._items.concat(Array(this.step).fill(undefined));
            this._dummies += this.step;
        }
    }
}
InfiniteScrollDirective.decorators = [
    { type: Directive, args: [{ selector: '[infiniteScroll]' },] },
];
/** @nocollapse */
InfiniteScrollDirective.ctorParameters = () => [
    { type: ViewContainerRef },
    { type: TemplateRef },
    { type: IterableDiffers },
    { type: NgZone }
];
InfiniteScrollDirective.propDecorators = {
    infiniteScrollOf: [{ type: Input }],
    infiniteScrollTrackBy: [{ type: Input }],
    infiniteScrollTemplate: [{ type: Input }],
    infiniteScrollPosition: [{ type: Input }],
    step: [{ type: Input, args: ['infiniteScrollStep',] }],
    offset: [{ type: Input, args: ['infiniteScrollOffset',] }],
    delay: [{ type: Input, args: ['infiniteScrollDelay',] }],
    infiniteScrollLoading: [{ type: Input }],
    infiniteScrollEnd: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    InfiniteScrollDirective.prototype._items;
    /** @type {?} */
    InfiniteScrollDirective.prototype._positionInitial;
    /** @type {?} */
    InfiniteScrollDirective.prototype._dummies;
    /** @type {?} */
    InfiniteScrollDirective.prototype._outOfItems;
    /** @type {?} */
    InfiniteScrollDirective.prototype.step;
    /** @type {?} */
    InfiniteScrollDirective.prototype.offset;
    /** @type {?} */
    InfiniteScrollDirective.prototype.delay;
}

//# sourceMappingURL=data:application/json;base64,